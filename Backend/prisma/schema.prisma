// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_STATUS {
  online
  offline
  in_game
}

enum NOTIF_TYPE {
  MESSAGE
  GAME_REQUEST
  FRIEND_REQUEST
}

enum STATE {
  BLOCKED
  PENDING
  ACCEPTED
  REFUSED
}

enum MODE {
  CLASSIC
  RANKED
}

enum Map {
  map1
  map2
}

enum ROOM_TYPE {
  PRIVATE
  PUBLIC
  PROTECTED
}

enum USER_STATUS_GROUP {
  MUTED
  UNMUTED
  BANNED
}

enum USER_ROLE {
  ADMIN
  MEMBER
}

model User {
  id            String          @id @default(uuid())
  firstName     String?         @unique
  lastName      String?         @unique
  username      String          @unique
  email         String?         @unique
  cover         String
  avatar        String
  towFactorAuth Boolean         @default(false)
  userStatus    USER_STATUS     @default(offline)
  achievement   Achievement[]
  notification  Notification[]
  friends       Friends[]
  game          Game[]
  logs          logs?
  channels      Channel[]
  messages      Message[]
  UserToChannel UserToChannel[]
}

model Friends {
  id     String @id @default(uuid())
  state  STATE
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Achievement {
  id          String @id @default(uuid())
  name        String
  description String
  userId      String
  user        User?  @relation(fields: [userId], references: [id])
}

model Notification {
  id       String     @id @default(uuid())
  userId   String
  user     User?      @relation(fields: [userId], references: [id])
  notftype NOTIF_TYPE @default(MESSAGE)
}

model History {
  id            String  @id @default(uuid())
  userScore     Int
  opponentScore Int
  accepted      Boolean
  gameId        String  @unique
  game          Game    @relation(fields: [gameId], references: [id]) // Define the relation to Game
}

model logs {
  id        String @id @default(uuid())
  vectories Int
  defeats   Int
  level     Int
  rank      String
  userId    String @unique
  user      User?  @relation(fields: [userId], references: [id])
}

model opponent {
  id       String @id @default(uuid())
  username String
  Game     Game[]
}

model Game {
  id         String   @id @default(uuid())
  historyId  String?  @unique
  opponentId String
  mode       MODE
  map        Map
  history    History?
  userId     String
  opponent   opponent @relation(fields: [opponentId], references: [id]) // Define the relation to User
  user       User?    @relation(fields: [userId], references: [id]) // Define the relation to User
}

model Channel {
  id            String          @id @default(uuid())
  name          String
  directMessage Boolean
  type          ROOM_TYPE
  moderatorId   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  messages      Message[]
  members       User[]
  memberCount   Int             @default(0)
  memberLimit   Int             @default(100)
  UserToChannel UserToChannel[]
}

model UserToChannel {
  id        String  @id @default(uuid())
  userId    String
  channelId String
  user      User    @relation(fields: [userId], references: [id])
  channel   Channel @relation(fields: [channelId], references: [id])
}

model Message {
  id        String  @id @default(uuid())
  content   String
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}
